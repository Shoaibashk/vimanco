{"version":3,"file":"extension.js","mappings":"swBAEA,kBACA,SACA,SACA,SAIA,oBAAyBA,GAKxB,EAAAC,OAAOC,QAGP,IAAAC,0BACAC,QAAQC,IAAI,4DAGZ,MAAMC,GAAe,IAAAC,oBACrB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,qBAAqBC,UACrE,MAAMC,GAAmB,IAAAC,oCAErBR,EAAaS,IAAI,eACd,IAAAC,eACLV,EACA,yBACAO,EAAiBI,IAAI,6BAEhB,IAAAD,eACLV,EACA,iBACAO,EAAiBI,IAAI,qBAEhB,IAAAD,eACLV,EACA,gBACAO,EAAiBI,IAAI,oBAEhB,IAAAD,eACLV,EACA,eACAO,EAAiBI,IAAI,mBAEhB,IAAAD,eACLV,EACA,4BACAO,EAAiBI,IAAI,gCAEhB,IAAAD,eACLV,EACA,wCACAO,EAAiBI,IAAI,4CAEhB,IAAAD,eACLV,EACA,aACAO,EAAiBI,IAAI,iBAEhB,IAAAD,eACLV,EACA,iBACAO,EAAiBI,IAAI,gBAGvBR,EAAOS,OAAOC,uBAAuB,wBAAwB,IAG9DnB,EAAQoB,cAAcC,KAAKb,EAC5B,EAGA,wBAA+B,C,4xBC1E/B,kBAEA,8BACI,OAAOC,EAAOa,UAAUC,kBAC5B,EACA,gBAAOX,eAA6BY,EAAuCC,EAAiBC,GACxF,aAAaF,EAAOG,OAAOF,EAASC,GAAO,EAC/C,EACA,8CACI,OAAOjB,EAAOa,UAAUC,iBAAiB,QAC7C,C,+uBCVA,kBAEA,yBAAOX,iBACH,MAAMgB,EAAYnB,EAAOoB,WAAWC,aAAa,iBAGjD,GAAIF,EAAW,CACX,MAAMG,EAAcH,EAAUI,YAC9B5B,QAAQC,IAAI,kBAAmB0B,EAAYE,MAC3C7B,QAAQC,IAAI,qBAAsB0B,EAAYG,SAC9C9B,QAAQC,IAAI,yBAA0B0B,EAAYI,Y,MAElD/B,QAAQgC,MAAM,uBAEtB,C,iFCdA,eAEA,MAAanC,EACDoC,cAED,WAAOnC,GACVD,EAAOqC,OAAS,EAAApB,OAAOqB,oBAAoB,MAAO,CAAElC,KAAK,GAC7D,CAEO,YAAO+B,CAAMI,GAChBvC,EAAOqC,OAAOF,MAAMI,EACxB,CACO,WAAOC,CAAKD,GACfvC,EAAOqC,OAAOG,KAAKD,EACvB,CACO,WAAOE,CAAKF,GACfvC,EAAOqC,OAAOI,KAAKF,EACvB,CACO,YAAOG,CAAMH,GAChBvC,EAAOqC,OAAOK,MAAMH,EACxB,CACO,YAAOI,CAAMJ,GAChBvC,EAAOqC,OAAOM,MAAMJ,EACxB,EArBJ,U,UCFAK,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://vimanco/./src/extension.ts","webpack://vimanco/./src/utils/GetConfiguration.ts","webpack://vimanco/./src/utils/GetVimExtensionVersion.ts","webpack://vimanco/./src/utils/Logger.ts","webpack://vimanco/external commonjs \"vscode\"","webpack://vimanco/webpack/bootstrap","webpack://vimanco/webpack/startup"],"sourcesContent":["\n\nimport * as vscode from 'vscode';\nimport { GetConfiguration, GetCurrentExtensionConfiguration, UpdateSetting } from './utils/GetConfiguration';\nimport { GetVimExtensionVersion } from './utils/GetVimExtensionVersion';\nimport { Logger } from './utils/Logger';\n\n\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\n\n\n\tLogger.init();\n\n\n\tGetVimExtensionVersion();\n\tconsole.log('Congratulations, your extension \"vimanco\" is now active!');\n\n\n\tconst userSettings = GetConfiguration();\n\tlet disposable = vscode.commands.registerCommand('vimanco.updateVim', async () => {\n\t\tconst currentExtension = GetCurrentExtensionConfiguration();\n\n\t\tif (userSettings.has(\"vim\")) {\n\t\t\tawait UpdateSetting(\n\t\t\t\tuserSettings,\n\t\t\t\t\"vim.useSystemClipboard\",\n\t\t\t\tcurrentExtension.get(\"UseSystemClipboard\")\n\t\t\t);\n\t\t\tawait UpdateSetting(\n\t\t\t\tuserSettings,\n\t\t\t\t\"vim.easymotion\",\n\t\t\t\tcurrentExtension.get(\"EasyMotion\")\n\t\t\t);\n\t\t\tawait UpdateSetting(\n\t\t\t\tuserSettings,\n\t\t\t\t\"vim.incsearch\",\n\t\t\t\tcurrentExtension.get(\"IncSearch\")\n\t\t\t);\n\t\t\tawait UpdateSetting(\n\t\t\t\tuserSettings,\n\t\t\t\t\"vim.hlsearch\",\n\t\t\t\tcurrentExtension.get(\"HlSearch\")\n\t\t\t);\n\t\t\tawait UpdateSetting(\n\t\t\t\tuserSettings,\n\t\t\t\t\"vim.insertModeKeyBindings\",\n\t\t\t\tcurrentExtension.get(\"InsertModeKeyBindings\")\n\t\t\t);\n\t\t\tawait UpdateSetting(\n\t\t\t\tuserSettings,\n\t\t\t\t\"vim.normalModeKeyBindingsNonRecursive\",\n\t\t\t\tcurrentExtension.get(\"NormalModeKeyBindingsNonRecursive\")\n\t\t\t);\n\t\t\tawait UpdateSetting(\n\t\t\t\tuserSettings,\n\t\t\t\t\"vim.leader\",\n\t\t\t\tcurrentExtension.get(\"Leader\")\n\t\t\t);\n\t\t\tawait UpdateSetting(\n\t\t\t\tuserSettings,\n\t\t\t\t\"vim.handleKeys\",\n\t\t\t\tcurrentExtension.get(\"HandleKeys\")\n\t\t\t);\n\t\t}\n\t\tvscode.window.showInformationMessage(\"Updated User Settings\");\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\n\nexport function deactivate() { }\n","import * as vscode from \"vscode\";\r\n\r\nexport function GetConfiguration(): vscode.WorkspaceConfiguration {\r\n    return vscode.workspace.getConfiguration();\r\n}\r\nexport async function UpdateSetting(config: vscode.WorkspaceConfiguration, section: string, value: any) {\r\n    return await config.update(section, value, true);\r\n}\r\nexport function GetCurrentExtensionConfiguration(): vscode.WorkspaceConfiguration {\r\n    return vscode.workspace.getConfiguration(\"ImKey\");\r\n}","import * as vscode from \"vscode\";\r\n\r\nexport async function GetVimExtensionVersion() {\r\n    const extension = vscode.extensions.getExtension(\"vscodevim.vim\");\r\n\r\n\r\n    if (extension) {\r\n        const packageJson = extension.packageJSON;\r\n        console.log(\"Extension Name:\", packageJson.name);\r\n        console.log(\"Extension Version:\", packageJson.version);\r\n        console.log(\"Extension Description:\", packageJson.description);\r\n    } else {\r\n        console.error(\"Extension not found.\");\r\n    }\r\n}\r\n","import { LogOutputChannel, window } from 'vscode';\r\n\r\nexport class Logger {\r\n    private static output: LogOutputChannel;\r\n\r\n    public static init(): void {\r\n        Logger.output = window.createOutputChannel('Vim', { log: true });\r\n    }\r\n\r\n    public static error(msg: string): void {\r\n        Logger.output.error(msg);\r\n    }\r\n    public static warn(msg: string): void {\r\n        Logger.output.warn(msg);\r\n    }\r\n    public static info(msg: string): void {\r\n        Logger.output.info(msg);\r\n    }\r\n    public static debug(msg: string): void {\r\n        Logger.output.debug(msg);\r\n    }\r\n    public static trace(msg: string): void {\r\n        Logger.output.trace(msg);\r\n    }\r\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["context","Logger","init","GetVimExtensionVersion","console","log","userSettings","GetConfiguration","disposable","vscode","commands","registerCommand","async","currentExtension","GetCurrentExtensionConfiguration","has","UpdateSetting","get","window","showInformationMessage","subscriptions","push","workspace","getConfiguration","config","section","value","update","extension","extensions","getExtension","packageJson","packageJSON","name","version","description","error","static","output","createOutputChannel","msg","warn","info","debug","trace","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}